/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by informer-gen

package v1

import (
	democontroller_v1 "github.com/sanjid133/crd-controller/apis/democontroller/v1"
	versioned "github.com/sanjid133/crd-controller/client/clientset/versioned"
	internalinterfaces "github.com/sanjid133/crd-controller/client/informers/externalversions/internalinterfaces"
	v1 "github.com/sanjid133/crd-controller/client/listers/democontroller/v1"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// SecDbInformer provides access to a shared informer and lister for
// SecDbs.
type SecDbInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.SecDbLister
}

type secDbInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewSecDbInformer constructs a new informer for SecDb type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewSecDbInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredSecDbInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredSecDbInformer constructs a new informer for SecDb type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredSecDbInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options meta_v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.DemocontrollerV1().SecDbs(namespace).List(options)
			},
			WatchFunc: func(options meta_v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.DemocontrollerV1().SecDbs(namespace).Watch(options)
			},
		},
		&democontroller_v1.SecDb{},
		resyncPeriod,
		indexers,
	)
}

func (f *secDbInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredSecDbInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *secDbInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&democontroller_v1.SecDb{}, f.defaultInformer)
}

func (f *secDbInformer) Lister() v1.SecDbLister {
	return v1.NewSecDbLister(f.Informer().GetIndexer())
}
