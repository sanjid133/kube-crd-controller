/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/sanjid133/crd-controller/apis/democontroller/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SecDbLister helps list SecDbs.
type SecDbLister interface {
	// List lists all SecDbs in the indexer.
	List(selector labels.Selector) (ret []*v1.SecDb, err error)
	// SecDbs returns an object that can list and get SecDbs.
	SecDbs(namespace string) SecDbNamespaceLister
	SecDbListerExpansion
}

// secDbLister implements the SecDbLister interface.
type secDbLister struct {
	indexer cache.Indexer
}

// NewSecDbLister returns a new SecDbLister.
func NewSecDbLister(indexer cache.Indexer) SecDbLister {
	return &secDbLister{indexer: indexer}
}

// List lists all SecDbs in the indexer.
func (s *secDbLister) List(selector labels.Selector) (ret []*v1.SecDb, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SecDb))
	})
	return ret, err
}

// SecDbs returns an object that can list and get SecDbs.
func (s *secDbLister) SecDbs(namespace string) SecDbNamespaceLister {
	return secDbNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecDbNamespaceLister helps list and get SecDbs.
type SecDbNamespaceLister interface {
	// List lists all SecDbs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.SecDb, err error)
	// Get retrieves the SecDb from the indexer for a given namespace and name.
	Get(name string) (*v1.SecDb, error)
	SecDbNamespaceListerExpansion
}

// secDbNamespaceLister implements the SecDbNamespaceLister
// interface.
type secDbNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SecDbs in the indexer for a given namespace.
func (s secDbNamespaceLister) List(selector labels.Selector) (ret []*v1.SecDb, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SecDb))
	})
	return ret, err
}

// Get retrieves the SecDb from the indexer for a given namespace and name.
func (s secDbNamespaceLister) Get(name string) (*v1.SecDb, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("secdb"), name)
	}
	return obj.(*v1.SecDb), nil
}
